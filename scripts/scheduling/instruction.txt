Homework for Scheduling
This homework is based on problems from Ch. 8 of OSTEP and the program 
mlfq.py.
http://pages.cs.wisc.edu/~remzi/OSTEP/Homework/homework.html
”Turnaround” is time to complete the job (endTime - startTime), and
”response” is the time from the time it entered the queue until got
the CPU for the first time, i.e. whether it behaves well for an
interactive workload.
You will have several files. Please put them in a .tgz or .zip file,
no other file formats will be accepted!
1. Create a README.txt file that describes all of the files you include.
2. Do problem 1 from Ch. 8. *Describe* what you found,
and include the output of each run as a separate file.
3. For problem 2 from Ch. 8: configure mlfq.py to reproduce Figs. 8.2,
8.3, 8.4, 8.5, and 8.7 (that is, not 8.6). Run it. *Describe* what
you found, and include the output of each run as a separate file.
4. On Monday, we talked about average completion time and fairness.
The program already reports average completion time (the ”turnaround”
above). Extend the program to report fairness also. This is a bit of
a big deal; you will have to think about how to calculate fairness when
there are jobs of varying lengths.
a. Write a description of how you would calculate this in a
round-robin multitasking environment. (That is, the job doesn’t ”own” the
CPU; it shares it round-robin fashion. The simulator already
_does_ this, but it doesn’t report the fairness, and you may need
to adapt the definition of fairness.) (It’s okay if you find a suggestion on
the web, but indicate where you got it, if so!)
b. Add it into the program, *with comments in the code*.
c. Run this with a set of fixed-length (not random length) jobs and
report the fairness achieved.
d. Rerun the problems for the same set of figures above and report
the fairness achieved. (So this includes variable-length jobs.)
